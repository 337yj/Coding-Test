# 그리드
# 모험가 길드 : 문제 설명

# 한 마을에 모험가가 N명 있다. 모험가 길드에서는 N명의 모험가를 대상으로 '공포도'를 측정했는데,
# '공포도'가 높은 모험가는 쉽게 공포를 느껴 위험 상황에서 제대로 대처할 능력이 떨어진다.
# 모험가 길드장인 동빈이는 모험가 그룹을 안전하게 구성하고자 
# 공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해함.
# 동빈이는 최대 몇 개의 모험가 그룹을 만들 수 있는지 궁금하다.
# N명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹 수의 최대값을 구해라

# 예를 들어 N = 5이고, 각 모험가의 공포도가 다음과 같다고 가정
# 2 3 1 2 2
# 이 경우 그룹 1에 공포도가 1,2,3 인 모험가를 한 명씩 넣고, 
# 그룹 2에 공포도가 2인 남은 두 명을 넣게되면 총 2개의 그룹을 만들 수 있다.
# 또한 몇 명의 모험가는 마을에 그대로 남아 있어도 되기 때문에, 모든 모험가를 넣을 필요 없다.

# 문제조건 (메모리 제한 128MB)

# 입력조건
# 첫째 줄에 모험가의 수 N이 주어진다 (1 <= N <= 100,000)
# 둘째 줄에 각 모험가의 공포도의 값을 N이하의 자연수로 주어지며, 각 자연수는 공백으로 구분

# 출력조건
# 여행을 떠날 수 있는 그룹 수의 최대값을 출력

# 입력예시
# 5
# 2 3 1 2 2
# 출력예시
# 2

# 문제 해결 아이디어

# 오름차순 정렬 이후에 공포도가 가장 낮은 모험가부터 하나씩 확인
# 공포도가 X인 모험가는 반드시 X명 이상으로 구성
# ex) 공포도 1인 모험가는 1명만 있어도 구성, 공포도 2인 모험가는 최소 2명있어야 구성
# 앞에서부터 공포도를 하나씩 확인하며 
# '현재 그룹에 포함된 모험가의 수'가 
# '현재 확인하고 있는 공포도'보다 크거나 같다면 이를 그룹으로설정함.
# 이러한 방법을 이용하면 공포도가 오름차순으로 정렬되어 있다는 점에서,
# 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 됨.
# -> 1부터하면 1명만으로 바로 모험 보낼 수 있으니까 (최대 그룹 수 구해야됨)


# 정수들 정렬
n = int(input())
data = list(map(int, input().split()))
data.sort()

result = 0 # 총 그룹의 수
count = 0 # 현재 그룹에 포함된 모험가의 수 (그룹결성시 0으로 업뎃 반복)

for i in data:
  count += 1 # 현재 그룹에 해당 모험가를 포함시키기
  if count >= i: # 현재 그룹에 해당 모험가를 포함시키기
    result += 1 # 총 그룹의 수 증가시키기 (그룹결성시 result에 1추가)
    count = 0 # 현재 그룹에 포합된 모험가의 수 초기화

print(result) # 총 그룹의 수 출력
